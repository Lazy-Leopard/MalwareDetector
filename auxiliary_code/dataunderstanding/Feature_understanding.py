from tqdm import tqdm
import json
import os
import collections
''' Score, Signatures(Description), Severity, Processes(BaseName in modules , category/api in calls) TO DO: Registries read'''

desc_list = {}
#https://devqa.io/python-parse-json/
#https://www.programiz.com/python-programming/nested-dictionary
glob_desc_list = []
glob_api_calls = []
glob_basenames = []
path_main = './extract/Dynamic_Analysis_Data_Part2/Malware/Worm' #insert path here - root/Dynamic_Analysis_Data_Part1/Malware/Backdoor
paths = os.listdir(path_main)
#print(paths)
for path in tqdm(paths):
    filename = path
    path = path_main + '/' + path
    with open(path) as file:
        #print(file)
        parsed_json = json.load(file)
    #print((parsed_json))
    score = parsed_json['info']['score']
    #print(score)
    signatures = parsed_json['signatures']
    for signature in signatures:
        if signature['description'].endswith('VirusTotal as malicious'):
            desc_list[
                'File has been identified by AntiVirus engines on VirusTotal as malicious'] = signature[
                    'severity']
        else:
            desc_list[signature['description']] = signature['severity']
    behavior = parsed_json['behavior']
    processes = behavior['processes']
    modules = []
    calls = []
    base_names = []
    api_calls = []
    for process in processes:
        #print(process)
        modules = process['modules']
        calls = process['calls']
        for module in modules:
            base_names.append(module['basename'])
        for call in calls:
            temp_dict = {}
            temp_dict[call['category']] = call['api']
            if temp_dict not in api_calls:
                api_calls.append(temp_dict)
    #print("\nFile : " + filename)
    #print("Score : " + str(score))
    #print("Description:")
    for key in desc_list:
        glob_desc_list.append(key)
        #print(key + " : " + str(desc_list[key]))
    #print("DLLS:")
    for name in base_names:
        name = name.lower()
        #print(name)
        glob_basenames.append(name)
    #print("API calls:")
    for dic in api_calls:
        for key in dic:
            glob_api_calls.append(dic[key])
            #print(key + " : " +dic[key])

print("API calls:")
glob_api_calls = collections.Counter(glob_api_calls)
print(glob_api_calls)

print("\nDLLS:")
glob_basenames = collections.Counter(glob_basenames)
print(glob_basenames)

print("\nDescriptions: ")
glob_desc_list = collections.Counter(glob_desc_list)
print(glob_desc_list)
