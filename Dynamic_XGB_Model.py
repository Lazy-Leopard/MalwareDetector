import pandas as pd
import numpy as np
from joblib import dump, load

train = pd.read_csv("auxiliary_come/Description.csv",index_col='File Hash')
print(len(train))
#print = train.shape()
print(train.columns)

X = train.drop(['Is_Malware'],axis = 1)

y = train['Is_Malware']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.25, train_size=0.75, random_state=1)
print(len(y_train))
print(len(X_test))

import xgboost as xgb
from sklearn.metrics import mean_squared_error
from xgboost.sklearn import XGBClassifier

estimator = XGBClassifier(
    objective= 'binary:logistic',
    nthread=4,
    seed=42
)
from sklearn.model_selection import RandomizedSearchCV
parameters = {
    'n_estimators': range(100, 500, 100),
    'learning_rate': [0.1, 0.01,0.001,0.05],
    'subsample': [0.6, 0.8, 1.0],
    'colsample_bytree': [0.6, 0.8, 1.0],
    'max_depth': [4, 5, 6]
}
random_search = RandomizedSearchCV(estimator, param_distributions=parameters, n_iter=15, scoring='f1', n_jobs=-1, cv=5, verbose=3, random_state=1001 )
random_search.fit(X_train,y_train)

y_predict = random_search.predict(X_test)

#print(y_predict)

#print(type(y_predict))
#print(y_predict)
dic = {1:'Malware', 0:'Benign'}

predictions = [dic.get(n, n) for n in y_predict]
predictions=np.array(predictions)
#print(type(predictions))
#print(predictions)

import sklearn.metrics
#print(sklearn.metrics.precision_recall_fscore_support(y_test, y_predict, average = 'binary'))

output = pd.DataFrame({'File Name': X_test.index ,
                       'Predictions': predictions})


output.to_csv('Predictions.csv', index=False)

dump(random_search, 'Dynamic.joblib')      
